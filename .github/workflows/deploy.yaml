name: "Deploy Infrastructure"

on:
  push:
    branches: [master]
    paths:
      - "terraform/**"
      - "src/**"
      - "html/**"
      - ".github/workflows/**"
  pull_request:
    branches: [master]
    paths:
      - "terraform/**"
      - "src/**"
      - "html/**"
      - ".github/workflows/**"
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_VERSION: 1.12.2

jobs:
  terraform-checks:
    name: Terraform Checks
    runs-on: ubuntu-latest
    environment: AWS_REGION
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: terraform

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.0

      - name: Initialize TFLint
        run: tflint --init
        working-directory: terraform

      - name: Run TFLint
        run: tflint
        working-directory: terraform

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov
        run: |
          checkov -d terraform/ \
            --framework terraform \
            --output cli \
            --output sarif \
            --output-file-path console,checkov-report.sarif \
            --soft-fail

      - name: Upload Checkov results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkov-report
          path: checkov-report.sarif

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: AWS_REGION
    needs: [terraform-checks, security-scan]
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -var-file="data.tfvars" -out=tfplan
        working-directory: terraform

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-checks, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: AWS_REGION
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -var-file="data.tfvars" -auto-approve
        working-directory: terraform

      - name: Get API Gateway URL
        id: api_url
        run: |
          API_URL=$(terraform output -raw api_gateway_url)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        working-directory: terraform

      - name: Run Tests
        run: |
          python -m venv test-env
          source test-env/bin/activate
          pip install -r tests/requirements.txt
          python tests/test_milestone2.py
        env:
          API_GATEWAY_URL: ${{ steps.api_url.outputs.api_url }}

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: AWS_REGION
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Destroy
        run: terraform destroy -var-file="data.tfvars" -auto-approve
        working-directory: terraform
